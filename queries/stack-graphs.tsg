; ####
; Rust
; ####
;
; All nodes that can contain uses or appear in expression context must have:
;
;     .scope - The current lexical scope, used for looking up functions, local
;         variables, arguments, consts, and statics.
;
; Rust also has a separate type scope, used for looking up modules and types,
; including `super`, `self`, and `Self`, but they're closely related and I'm
; going to worry about it later.
;
; Items have a node:
;
;     .definition - The node that pops the item's name.

attribute symbol_reference = symbol     => type = "push_symbol", symbol = symbol, is_reference
attribute node_definition = node        => type = "pop_symbol", node_symbol = node, is_definition
attribute node_symbol = node            => symbol = (source-text node), source_node = node

(source_file)@root {
  node @root.scope
}

(_
  [
    (function_item)
    (parameters)
    (parameter)
    (block)
  ]@node
)@parent {
  node @node.scope
  edge @node.scope -> @parent.scope
}

(_
  [
    (const_item)
    (expression_statement)
    (if_expression)
    (binary_expression)
    (else_clause)
    (call_expression)
    (arguments)
    (identifier)
    (integer_literal)
    (line_comment)
  ]@node
)@parent {
  let @node.scope = @parent.scope
}

(identifier)@identifier {
  node @identifier.use
  attr (@identifier.use) symbol_reference = (source-text @identifier), source_node = @identifier;
  edge @identifier.use -> @identifier.scope
}

[
  (const_item name:(_)@name)@item
  (function_item name: (_)@name)@item
] {
  node @item.definition
  attr (@item.definition) node_definition = @name
}

(source_file
  [
    (const_item)
    (function_item)
  ]@item
)@parent {
  edge @parent.scope -> @item.definition
}

(parameters (parameter pattern:(_)@pattern) )@parameters {
  node @parameters.definitions
  node @pattern.definitions
  edge @parameters.definitions -> @pattern.definitions
}

(parameter pattern:(identifier)@pattern) {
  node @pattern.definition
  attr (@pattern.definition) node_definition = @pattern
  edge @pattern.definitions -> @pattern.definition
}

(function_item parameters:(_)@parameters body:(_)@body)@function {
  edge @function.scope -> @parameters.definitions
}
